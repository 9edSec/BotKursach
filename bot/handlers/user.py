import os 
import asyncio
import bot.keyboards.user as bku

from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.tools.tool import UserTools
from bot.other.questions import questions
from bot.other import certificate_generator


router_handler_user = Router()


class CertificateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()


@router_handler_user.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def st_get_certificate(message: Message):
    await message.answer('''
    <b><u>üéì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∫—É—Ä—Å—É Python</u></b>

<b>–ì–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?</b>

        1. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.
            –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∏–º–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!
            

        2. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.
            –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç—Ç–∞–ø–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞–º –∫—É—Ä—Å–∞ (—Å —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è).
            

        3. –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!

<b>–í–∞–∂–Ω–æ: –≠—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Äî –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–∞—à–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.</b>

<b>–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!</b>


''', parse_mode="HTML", reply_markup= bku.kb_get_certificate())
    

@router_handler_user.message(F.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def st_faq(message: Message):
    await message.answer('''
    <b>1)–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è?</b>
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å Python. –û–Ω –ø—Ä–æ—Å—Ç–æ–π –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏ –∏–º–µ–µ—Ç —à–∏—Ä–æ–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.

    <b>2)–ö–∞–∫ —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞?</b>
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–µ —É–º–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏—è –ø–æ –∏–∑—É—á–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.

    <b>3)–ì–¥–µ —è –º–æ–≥—É –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?</b>
        –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.

    <b>4)–ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑?</b>
        –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ. –í–∞—à –∑–∞—á—ë—Ç –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞–∏–ª—É—á—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É!

    <b>5)–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è?</b>
        –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /contact !
''', parse_mode="HTML", reply_markup=bku.no_response)
    

@router_handler_user.callback_query(F.data == 'no_to_respone')
async def no_response(callback: CallbackQuery):
    await callback.message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º', reply_markup=bku.reply_kb)


'''–ù–∞—á–∞–ª–æ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'''

#—Å–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ questions.py)

user_answers = {}

def create_answer_kb(q_idx):
    answers = questions[q_idx]["answers"]
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=ans, callback_data=f"answer_{q_idx}_{i}")] for i, ans in enumerate(answers)
        ]
    )
    return keyboard


@router_handler_user.callback_query(F.data == 'take_test')
async def start_test(callback: CallbackQuery):
    user_answers.clear()
    q_idx = 0
    question_text = questions[q_idx]["question"]
    msg = await callback.message.answer(
        f"–í–æ–ø—Ä–æ—Å {q_idx + 1}:\n{question_text}",
        reply_markup=create_answer_kb(q_idx)
    )
    


@router_handler_user.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery):
    data = callback.data.split("_")
    q_idx = int(data[1])
    answer_idx = int(data[2])
    user_answers[q_idx] = answer_idx  
    
    next_q = q_idx + 1
    if next_q < len(questions):
        question = questions[next_q]["question"]
        msg = await callback.message.answer(f"–í–æ–ø—Ä–æ—Å {next_q+1}:\n{question}", reply_markup=create_answer_kb(next_q))
    else:
        
        await callback.message.answer("–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=bku.check_kb)
    await callback.answer()

   


@router_handler_user.callback_query(F.data == "check_answers")
async def check_answers(callback: CallbackQuery):
    correct_count = 0
    wrong_questions = []
    for i, q in enumerate(questions):
        user_ans = user_answers.get(i)
        if user_ans == q["correct"]:
            correct_count += 1
        else:
            wrong_questions.append(i+1)  
    
    total = len(questions)
    result_msg = f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_count} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
    if wrong_questions:
        result_msg += "–û—à–∏–±–∫–∏ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö: " + ", ".join(map(str, wrong_questions))
    else:
        result_msg += "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ! üéâ"
    await callback.message.answer(result_msg)
    await callback.answer()

    if correct_count <= 7:
        await callback.message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –Ω—É–∂–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 7 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∏–¥–∏ –≥–æ—Ç–æ–≤—å—Å—è!", reply_markup=bku.restart_test_kb)
    else:
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!", reply_markup=bku.get_certificate_kb)

        

user_data = {}


@router_handler_user.callback_query(F.data == 'get_certificate') 
async def start_certificate_fsm(callback: CallbackQuery, state: FSMContext): 
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(CertificateStates.waiting_for_name) 
    await callback.answer()
    

@router_handler_user.message(CertificateStates.waiting_for_name) 
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text) 
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(CertificateStates.waiting_for_surname) 


@router_handler_user.message(CertificateStates.waiting_for_surname)
async def process_surname_and_generate(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text) 

    user_fsm_data = await state.get_data() 
    full_name = f"{user_fsm_data.get('surname')} {user_fsm_data.get('name')}"

   
    user_fsm_data = await state.get_data()
    
    name_from_state = user_fsm_data.get('name', '–ò–º—è–ù–µ–£–∫–∞–∑–∞–Ω–æ')
    surname_from_state = user_fsm_data.get('surname', '–§–∞–º–∏–ª–∏—è–ù–µ–£–∫–∞–∑–∞–Ω–∞')
    full_name = f"{surname_from_state} {name_from_state}".strip()

    if name_from_state == '–ò–º—è–ù–µ–£–∫–∞–∑–∞–Ω–æ' or surname_from_state == '–§–∞–º–∏–ª–∏—è–ù–µ–£–∫–∞–∑–∞–Ω–∞':
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è: <b>{full_name}</b>...", parse_mode="HTML")

    try:
        pdf_path = certificate_generator.generate_certificate(full_name)

        if pdf_path: 
            
            document_to_send = types.FSInputFile(
                path=pdf_path,
                filename=f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_{full_name.replace(' ', '_')}.pdf" 
            )
            await message.answer_document(
                document=document_to_send,
                caption=f"–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {full_name} –≥–æ—Ç–æ–≤!"
            )
            
            try:
                
                os.remove(pdf_path)
            except OSError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ {pdf_path}: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        else:
            
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. "
                "–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–æ–º —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )

    except Exception as e: 
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—á–µ–Ω—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally: 
        await state.clear()